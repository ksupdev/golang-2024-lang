package main

import (
	"context"
	"fmt"
	"time"

	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/logger"
)

type SqlLogger struct {
	logger.Interface //If you declare this line, GoLang will interpret it as implementing all interfaces defined under it.
}

func (l SqlLogger) Trace(ctx context.Context, begin time.Time, fc func() (sql string, rowsAffected int64), err error) {
	// Implement this method to retrieve the SQL command generated by GORM.
	sql, _ := fc()
	fmt.Printf("%v \n ====================\n", sql)
}

var db *gorm.DB

func main() {
	dsn := "root:password@tcp(localhost:3306)/ormdb?charset=utf8mb4&parseTime=true"
	dialector := mysql.Open(dsn)
	var err error
	db, err = gorm.Open(dialector, &gorm.Config{
		Logger: &SqlLogger{},
		// DryRun: true,
	})
	if err != nil {
		panic(err)
	}
	// db.AutoMigrate(Gender{}, Customer{}, Test{})

	// CreateGender("xxxx")
	// UpdateGender(4, "yyy")
	// UpdateGender2(4, "zzzz")
	// DeleteGender(4)
	// GetGenderByName("Male")
	// CreateCustomer("ปู", 1)
	GetCustomer()
}

func CreateGender(name string) {
	gender := Gender{Name: name}
	tx := db.Create(&gender)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	fmt.Println(gender)
}

func GetGenders() {
	gender := []Gender{}
	tx := db.Order("id").Find(&gender)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	fmt.Println(gender)
}

func GetGender(id uint) {
	gender := Gender{}
	tx := db.First(&gender, id)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	fmt.Println(gender)
}

func GetGenderByName(name string) {
	gender := Gender{}
	// tx := db.Order("id").Find(&gender, "name=?", name)
	tx := db.Order("id").Where("name=?", name).Find(&gender)
	// tx := db.Order("id").Where("name LIKE ?", fmt.Sprintf("%%%v%%", name)).Find(&gender)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	fmt.Println(gender)
}

func GetGenderByContainName(name string) {
	gender := Gender{}
	// tx := db.Order("id").Find(&gender, "name=?", name)
	// tx := db.Order("id").Where("name=?", name).Find(&gender)
	tx := db.Order("id").Where("name LIKE ?", fmt.Sprintf("%%%v%%", name)).Find(&gender)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	fmt.Println(gender)
}

func UpdateGender(id uint, name string) {
	gender := Gender{}
	tx := db.First(&gender, id)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}

	gender.Name = name
	tx = db.Save(&gender)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}

	GetGender(id)
}

func UpdateGender2(id uint, name string) {
	gender := Gender{
		Name: name,
	}
	tx := db.Model(&Gender{}).Where("id=?", id).Updates(gender)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	GetGender(id)
}

func DeleteGender(id uint) {
	tx := db.Delete(&Gender{}, id)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}
	fmt.Println("Deleted")
	GetGender(id)
}

func CreateCustomer(name string, genderID uint) {
	customer := Customer{
		Name:     name,
		GenderID: genderID,
	}

	tx := db.Create(&customer)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}

	fmt.Println(customer)
}

func GetCustomer() {
	customers := []Customer{}
	// tx := db.Preload("Gender").Find(&customers)
	tx := db.Preload(clause.Associations).Find(&customers)
	if tx.Error != nil {
		fmt.Println(tx.Error)
		return
	}

	fmt.Println(customers)

}

type Gender struct {
	ID   uint
	Name string `gorm:"unique;size(10)"`
}

type Test struct {
	gorm.Model
	Code uint
	Name string `gorm:"column:myname;type:varchar(50);unique;default:Hello;not null"`
}

type Customer struct {
	ID       uint
	Name     string
	Gender   Gender
	GenderID uint
}
